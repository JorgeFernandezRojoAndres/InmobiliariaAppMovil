{
  "app": {
    "src": {
      "main": {
        "java": {
          "com": {
            "jorge": {
              "inmobiliaria2025": {
                "ui": {
                  "contratos": {
                    "ContratoAdapter.java": "package com.jorge.inmobiliaria2025.ui.contratos;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.DiffUtil;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.jorge.inmobiliaria2025.databinding.ItemContratoBinding;\r\nimport com.jorge.inmobiliaria2025.model.Contrato;\r\nimport com.jorge.inmobiliaria2025.model.Inmueble;\r\n\r\nimport java.text.NumberFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class ContratoAdapter extends RecyclerView.Adapter<ContratoAdapter.ViewHolder> {\r\n\r\n    private List<Contrato> contratos;\r\n    private final OnItemClickListener listener;\r\n\r\n    public interface OnItemClickListener {\r\n        void onItemClick(Contrato contrato);\r\n    }\r\n\r\n    public ContratoAdapter(List<Contrato> contratos, OnItemClickListener listener) {\r\n        this.contratos = contratos != null ? contratos : new ArrayList<>();\r\n        this.listener = listener;\r\n    }\r\n\r\n    public void updateData(List<Contrato> nuevosContratos) {\r\n        if (nuevosContratos == null) nuevosContratos = new ArrayList<>();\r\n\r\n        final List<Contrato> nuevaLista = nuevosContratos;\r\n\r\n        DiffUtil.DiffResult diffResult = DiffUtil.calculateDiff(new DiffUtil.Callback() {\r\n            @Override\r\n            public int getOldListSize() {\r\n                return contratos.size();\r\n            }\r\n\r\n            @Override\r\n            public int getNewListSize() {\r\n                return nuevaLista.size();\r\n            }\r\n\r\n            @Override\r\n            public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {\r\n                return contratos.get(oldItemPosition).getId() == nuevaLista.get(newItemPosition).getId();\r\n            }\r\n\r\n            @Override\r\n            public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {\r\n                Contrato oldContrato = contratos.get(oldItemPosition);\r\n                Contrato newContrato = nuevaLista.get(newItemPosition);\r\n                return oldContrato.getMontoMensual() == newContrato.getMontoMensual()\r\n                        && oldContrato.getEstado().equals(newContrato.getEstado())\r\n                        && oldContrato.getFechaInicio().equals(newContrato.getFechaInicio())\r\n                        && oldContrato.getFechaFin().equals(newContrato.getFechaFin());\r\n            }\r\n        });\r\n\r\n        contratos = nuevaLista;\r\n        diffResult.dispatchUpdatesTo(this);\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        LayoutInflater inflater = LayoutInflater.from(parent.getContext());\r\n        ItemContratoBinding binding = ItemContratoBinding.inflate(inflater, parent, false);\r\n        return new ViewHolder(binding);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        Contrato contrato = contratos.get(position);\r\n        Inmueble inmueble = contrato.getInmueble();\r\n\r\n        String direccion = (inmueble != null && inmueble.getDireccion() != null && !inmueble.getDireccion().isEmpty())\r\n                ? inmueble.getDireccion()\r\n                : \"Inmueble #\" + contrato.getIdInmueble();\r\n\r\n        NumberFormat formatoMoneda = NumberFormat.getCurrencyInstance(new Locale(\"es\", \"AR\"));\r\n\r\n        holder.binding.tvDireccionContrato.setText(\"üè† \" + direccion);\r\n        holder.binding.tvMontoContrato.setText(\"üí∞ \" + formatoMoneda.format(contrato.getMontoMensual()));\r\n        holder.binding.tvFechasContrato.setText(String.format(\"üìÖ %s ‚Üí %s\", contrato.getFechaInicio(), contrato.getFechaFin()));\r\n\r\n        if (contrato.getEstado() != null && !contrato.getEstado().isEmpty()) {\r\n            holder.binding.tvEstadoContrato.setVisibility(View.VISIBLE);\r\n            holder.binding.tvEstadoContrato.setText(\"üìã Estado: \" + contrato.getEstado());\r\n        } else {\r\n            holder.binding.tvEstadoContrato.setVisibility(View.GONE);\r\n        }\r\n\r\n        holder.itemView.setOnClickListener(v -> listener.onItemClick(contrato));\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return contratos != null ? contratos.size() : 0;\r\n    }\r\n\r\n    static class ViewHolder extends RecyclerView.ViewHolder {\r\n        final ItemContratoBinding binding;\r\n        ViewHolder(@NonNull ItemContratoBinding binding) {\r\n            super(binding.getRoot());\r\n            this.binding = binding;\r\n        }\r\n    }\r\n}\r\n",
                    "ContratoRepository.java": "package com.jorge.inmobiliaria2025.ui.contratos;\r\n\r\n\r\nimport android.util.Log;\r\nimport android.app.Application;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\nimport com.jorge.inmobiliaria2025.Retrofit.ApiService;\r\nimport com.jorge.inmobiliaria2025.Retrofit.RetrofitClient;\r\nimport com.jorge.inmobiliaria2025.model.Contrato;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\nimport java.io.IOException;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\npublic class ContratoRepository {\r\n\r\n    private static final String TAG = \"ContratoRepo\";\r\n    private final ApiService api;\r\n    private final MutableLiveData<List<Contrato>> contratosLiveData = new MutableLiveData<>();\r\n\r\n    public ContratoRepository(Application app) {\r\n        api = RetrofitClient.getInstance(app).create(ApiService.class);\r\n    }\r\n\r\n    public LiveData<List<Contrato>> getContratosLiveData() {\r\n        return contratosLiveData;\r\n    }\r\n\r\n    // üîπ Carga los contratos vigentes del propietario autenticado\r\n    public void cargarContratosVigentes(String token) {\r\n        Log.i(TAG, \"üì° Solicitando contratos vigentes al backend...\");\r\n\r\n        api.getContratosVigentes(\"Bearer \" + token).enqueue(new Callback<List<Contrato>>() {\r\n            @Override\r\n            public void onResponse(Call<List<Contrato>> call, Response<List<Contrato>> response) {\r\n                if (response.isSuccessful() && response.body() != null) {\r\n                    List<Contrato> contratos = response.body();\r\n                    contratosLiveData.postValue(contratos);\r\n\r\n                    Log.i(TAG, \"‚úÖ Contratos recibidos: \" + contratos.size());\r\n                    for (Contrato c : contratos) {\r\n                        Log.v(TAG, \"üìù Contrato ID=\" + c.getId() +\r\n                                \" | Direccion=\" + (c.getInmueble() != null ? c.getInmueble().getDireccion() : \"null\") +\r\n                                \" | Estado=\" + c.getEstado());\r\n                    }\r\n\r\n                } else {\r\n                    int code = response.code();\r\n                    String errorBody = \"\";\r\n                    try {\r\n                        if (response.errorBody() != null) {\r\n                            errorBody = response.errorBody().string();\r\n                            // üîç Intentamos parsear el JSON devuelto por el backend\r\n                            try {\r\n                                JSONObject json = new JSONObject(errorBody);\r\n                                String mensaje = json.optString(\"mensaje\", \"\");\r\n                                String detalle = json.optString(\"detalle\", \"\");\r\n                                Log.e(TAG, \"üí• Error backend (\" + code + \"): \" + mensaje + \" | Detalle: \" + detalle);\r\n                            } catch (JSONException je) {\r\n                                Log.e(TAG, \"‚ö†Ô∏è Error backend (\" + code + \"): cuerpo no JSON -> \" + errorBody);\r\n                            }\r\n                        }\r\n                    } catch (IOException e) {\r\n                        Log.e(TAG, \"‚ö†Ô∏è No se pudo leer el cuerpo del error: \" + e.getMessage());\r\n                    }\r\n\r\n                    contratosLiveData.postValue(Collections.emptyList());\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(Call<List<Contrato>> call, Throwable t) {\r\n                Log.e(TAG, \"‚ùå Error al conectar con el servidor: \" + t.getMessage(), t);\r\n                contratosLiveData.postValue(Collections.emptyList());\r\n            }\r\n        });\r\n    }\r\n}\r\n",
                    "ContratosFragment.java": "package com.jorge.inmobiliaria2025.ui.contratos;\r\n\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.fragment.NavHostFragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.jorge.inmobiliaria2025.R;\r\nimport com.jorge.inmobiliaria2025.databinding.FragmentContratosBinding;\r\n\r\npublic class ContratosFragment extends Fragment {\r\n\r\n    private ContratosViewModel vm;\r\n    private ContratoAdapter adapter;\r\n    private RecyclerView rv;\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n\r\n        FragmentContratosBinding binding = FragmentContratosBinding.inflate(inflater, container, false);\r\n        vm = new ViewModelProvider(this).get(ContratosViewModel.class);\r\n\r\n        // üü¢ Configurar RecyclerView\r\n        binding.rvContratos.setLayoutManager(new LinearLayoutManager(requireContext()));\r\n        adapter = new ContratoAdapter(null, vm::onContratoSeleccionado);\r\n        binding.rvContratos.setAdapter(adapter);\r\n\r\n        // üß† Observa lista de contratos\r\n        vm.getContratos().observe(getViewLifecycleOwner(), adapter::updateData);\r\n\r\n        // ‚úÖ Observa evento de navegaci√≥n al detalle (sin NavOptions manuales)\r\n        vm.getAccionNavegarADetalle().observe(getViewLifecycleOwner(), args -> {\r\n            NavController navController = NavHostFragment.findNavController(this);\r\n\r\n            // üîπ Navega usando la acci√≥n del nav_graph (que ya incluye popUpToInclusive)\r\n            navController.navigate(R.id.action_contratosFragment_to_detalleContratoFragment, args);\r\n\r\n            Log.d(\"CONTRATOS\", \"‚û°Ô∏è Navegaci√≥n ejecutada hacia DetalleContratoFragment con args: \" + args);\r\n        });\r\n\r\n        // üîÑ Cargar contratos al iniciar\r\n        vm.cargarContratos();\r\n\r\n        return binding.getRoot();\r\n    }\r\n}\r\n",
                    "ContratosViewModel.java": "package com.jorge.inmobiliaria2025.ui.contratos;\r\n\r\nimport android.app.Application;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.lifecycle.AndroidViewModel;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.jorge.inmobiliaria2025.localdata.SessionManager;\r\nimport com.jorge.inmobiliaria2025.model.Contrato;\r\n\r\nimport java.util.List;\r\n\r\npublic class ContratosViewModel extends AndroidViewModel {\r\n\r\n    // ‚úÖ LiveData de contratos y navegaci√≥n\r\n    private final LiveData<List<Contrato>> contratos;\r\n    private final MutableLiveData<Bundle> accionNavegarADetalle = new MutableLiveData<>();\r\n\r\n    // ‚úÖ Repositorio y sesi√≥n\r\n    private final ContratoRepository repo;\r\n    private final SessionManager sessionManager;\r\n\r\n    public ContratosViewModel(@NonNull Application app) {\r\n        super(app);\r\n        // ‚úÖ Usar getApplication() para no pasar context de la vista\r\n        sessionManager = new SessionManager(getApplication());\r\n        repo = new ContratoRepository(getApplication());\r\n        contratos = repo.getContratosLiveData();\r\n    }\r\n\r\n    public LiveData<List<Contrato>> getContratos() {\r\n        return contratos;\r\n    }\r\n\r\n    public LiveData<Bundle> getAccionNavegarADetalle() {\r\n        return accionNavegarADetalle;\r\n    }\r\n\r\n    // ================================\r\n    // üîπ L√≥gica de carga desde el repo\r\n    // ================================\r\n    public void cargarContratos() {\r\n        // üîπ Toda la l√≥gica de validaci√≥n de token queda en el ViewModel\r\n        String token = sessionManager.obtenerToken();\r\n        if (token != null && !token.isEmpty()) {\r\n            repo.cargarContratosVigentes(token);\r\n        }\r\n    }\r\n    public void onContratoSeleccionado(Contrato contrato) {\r\n        if (contrato == null) return;\r\n\r\n        Bundle bundle = new Bundle();\r\n        bundle.putSerializable(\"contratoSeleccionado\", contrato);\r\n        accionNavegarADetalle.setValue(bundle);\r\n\r\n        // üßπ Limpieza autom√°tica tras emitir el evento\r\n        accionNavegarADetalle.postValue(null);\r\n    }\r\n\r\n}\r\n\r\n",
                    "DetalleContratoFragment.java": "package com.jorge.inmobiliaria2025.ui.contratos;\r\n\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.activity.OnBackPressedCallback;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.fragment.NavHostFragment;\r\n\r\nimport com.jorge.inmobiliaria2025.R;\r\nimport com.jorge.inmobiliaria2025.databinding.FragmentDetalleContratoBinding;\r\n\r\n/**\r\n * üìú DetalleContratoFragment\r\n * Muestra los datos de un contrato y permite acceder a la lista de pagos.\r\n */\r\npublic class DetalleContratoFragment extends Fragment {\r\n\r\n    private DetalleContratoViewModel vm;\r\n    private FragmentDetalleContratoBinding binding;\r\n    private boolean navegandoAPagos = false; // üîí evita navegaci√≥n m√∫ltiple\r\n    private int contratoId = -1;\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n\r\n        binding = FragmentDetalleContratoBinding.inflate(inflater, container, false);\r\n        vm = new ViewModelProvider(this).get(DetalleContratoViewModel.class);\r\n\r\n        Log.d(\"DETALLE_CONTRATO\", \"üß© Fragment creado o recreado\");\r\n\r\n        // üß† Recupera argumentos y carga contrato\r\n        if (getArguments() != null) {\r\n            contratoId = getArguments().getInt(\"contratoId\", -1);\r\n            Log.d(\"DETALLE_CONTRATO\", \"üì¶ contratoId recibido = \" + contratoId);\r\n            vm.inicializarDesdeArgs(getArguments());\r\n        } else {\r\n            Log.w(\"DETALLE_CONTRATO\", \"‚ö†Ô∏è No se recibieron argumentos en DetalleContratoFragment\");\r\n        }\r\n\r\n        // üü¢ Observa los datos del contrato\r\n        vm.getContrato().observe(getViewLifecycleOwner(), contrato -> {\r\n            if (contrato != null) {\r\n                Log.d(\"DETALLE_CONTRATO\", \"üìÑ Mostrando contrato ID = \" + contrato.getId());\r\n                binding.tvIdContrato.setText(String.valueOf(contrato.getId()));\r\n                binding.tvFechasDetalle.setText(contrato.getFechaInicio() + \" ‚Üí \" + contrato.getFechaFin());\r\n                binding.tvMontoDetalle.setText(\"Monto: $\" + contrato.getMontoMensual());\r\n                binding.tvEstadoDetalle.setText(\"Estado: \" + contrato.getEstado());\r\n            } else {\r\n                Log.w(\"DETALLE_CONTRATO\", \"‚ö†Ô∏è Contrato nulo al observar LiveData\");\r\n            }\r\n        });\r\n\r\n        // üü¢ Bot√≥n ‚ÄúVer Pagos‚Äù\r\n        binding.btnVerPagos.setOnClickListener(v -> {\r\n            if (navegandoAPagos) {\r\n                Log.w(\"DETALLE_CONTRATO\", \"‚ö†Ô∏è Navegaci√≥n a pagos ignorada (en progreso)\");\r\n                return;\r\n            }\r\n\r\n            navegandoAPagos = true;\r\n            Log.d(\"DETALLE_CONTRATO\", \"üñ±Ô∏è Click en 'Ver Pagos'\");\r\n\r\n            if (contratoId == -1) {\r\n                Log.e(\"DETALLE_CONTRATO\", \"‚ùå No se puede navegar: contratoId inv√°lido\");\r\n                navegandoAPagos = false;\r\n                return;\r\n            }\r\n\r\n            // üîπ Prepara argumentos\r\n            Bundle args = new Bundle();\r\n            args.putInt(\"contratoId\", contratoId);\r\n\r\n            // üîπ Navega usando la acci√≥n del nav_graph\r\n            NavController navController = NavHostFragment.findNavController(this);\r\n            navController.navigate(R.id.action_detalleContratoFragment_to_pagosFragment, args);\r\n\r\n            // üîì Rehabilita la navegaci√≥n despu√©s de una peque√±a pausa\r\n            binding.getRoot().postDelayed(() -> navegandoAPagos = false, 400);\r\n        });\r\n\r\n        // üü¢ Manejo del bot√≥n ‚ÄúAtr√°s‚Äù: deja que Navigation gestione el stack\r\n        requireActivity().getOnBackPressedDispatcher().addCallback(\r\n                getViewLifecycleOwner(),\r\n                new OnBackPressedCallback(true) {\r\n                    @Override\r\n                    public void handleOnBackPressed() {\r\n                        Log.d(\"NAV_BACK\", \"üîô Volviendo con navigateUp()\");\r\n                        NavHostFragment.findNavController(DetalleContratoFragment.this).navigateUp();\r\n                    }\r\n                }\r\n        );\r\n\r\n        return binding.getRoot();\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        if (contratoId != -1 && vm != null) {\r\n            Log.d(\"DETALLE_CONTRATO\", \"üîÅ Recargando contrato \" + contratoId);\r\n            vm.cargarContratoPorId(contratoId);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n",
                    "DetalleContratoViewModel.java": "    package com.jorge.inmobiliaria2025.ui.contratos;\r\n\r\n    import android.app.Application;\r\n    import android.os.Bundle;\r\n    import android.util.Log;\r\n\r\n    import androidx.annotation.NonNull;\r\n    import androidx.lifecycle.AndroidViewModel;\r\n    import androidx.lifecycle.LiveData;\r\n    import androidx.lifecycle.MutableLiveData;\r\n\r\n    import com.jorge.inmobiliaria2025.model.Contrato;\r\n\r\n    public class DetalleContratoViewModel extends AndroidViewModel {\r\n\r\n        private static final String TAG = \"DetalleContratoVM\";\r\n\r\n        private final MutableLiveData<Contrato> contrato = new MutableLiveData<>();\r\n        private final MutableLiveData<Bundle> accionNavegarAPagos = new MutableLiveData<>();\r\n\r\n        public DetalleContratoViewModel(@NonNull Application app) {\r\n            super(app);\r\n            Log.d(TAG, \"üß© ViewModel creado\");\r\n        }\r\n\r\n        // =============================\r\n        // üîπ Observables p√∫blicos\r\n        // =============================\r\n        public LiveData<Contrato> getContrato() {\r\n            return contrato;\r\n        }\r\n\r\n        public LiveData<Bundle> getAccionNavegarAPagos() {\r\n            return accionNavegarAPagos;\r\n        }\r\n\r\n        // =============================\r\n        // üîπ Inicializaci√≥n desde argumentos\r\n        // =============================\r\n        public void inicializarDesdeArgs(Bundle args) {\r\n            if (args == null) {\r\n                Log.w(TAG, \"‚ö†Ô∏è inicializarDesdeArgs() recibi√≥ args = null\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                Contrato recibido = (Contrato) args.getSerializable(\"contratoSeleccionado\");\r\n                if (recibido != null) {\r\n                    contrato.postValue(recibido);\r\n                    Log.d(TAG, \"‚úÖ Contrato inicializado con ID=\" + recibido.getId());\r\n                } else {\r\n                    Log.w(TAG, \"‚ö†Ô∏è No se encontr√≥ 'contratoSeleccionado' en args o es null\");\r\n                }\r\n            } catch (Exception e) {\r\n                Log.e(TAG, \"üí• Error al deserializar contrato: \" + e.getMessage());\r\n            }\r\n        }\r\n\r\n        // =============================\r\n        // üîπ Acci√≥n: navegar a pagos\r\n        // =============================\r\n        public void onVerPagosClick() {\r\n            Contrato actual = contrato.getValue();\r\n\r\n            if (actual == null) {\r\n                Log.w(TAG, \"‚ö†Ô∏è onVerPagosClick(): contrato actual es null, no se puede navegar\");\r\n                return;\r\n            }\r\n\r\n            Log.d(TAG, \"‚û°Ô∏è Navegando a pagos del contrato ID=\" + actual.getId());\r\n            Bundle bundle = new Bundle();\r\n            bundle.putSerializable(\"contratoSeleccionado\", actual);\r\n            accionNavegarAPagos.postValue(bundle);\r\n        }\r\n\r\n        public void limpiarAccionNavegar() {\r\n            if (accionNavegarAPagos.getValue() != null) {\r\n                Log.d(TAG, \"üßπ limpiando accionNavegarAPagos para evitar doble navegaci√≥n\");\r\n                accionNavegarAPagos.setValue(null);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        protected void onCleared() {\r\n            super.onCleared();\r\n            Log.d(TAG, \"üß© ViewModel destruido (onCleared)\");\r\n        }\r\n        public void cargarContratoPorId(int id) {\r\n            Log.d(TAG, \"üì° cargarContratoPorId() llamado con ID=\" + id);\r\n            // TODO: Si quer√©s, pod√©s implementar la recarga desde el repositorio m√°s adelante\r\n        }\r\n\r\n\r\n    }\r\n"
                  },
                  "nav": {
                    "MainActivity.java": "package com.jorge.inmobiliaria2025.ui.nav;\r\n\r\nimport android.view.View;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\n\r\nimport androidx.activity.OnBackPressedCallback;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.NavDestination;\r\nimport androidx.navigation.NavOptions;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.navigation.fragment.NavHostFragment;\r\nimport androidx.navigation.ui.AppBarConfiguration;\r\nimport androidx.navigation.ui.NavigationUI;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.jorge.inmobiliaria2025.R;\r\nimport com.jorge.inmobiliaria2025.databinding.ActivityMainBinding;\r\nimport com.jorge.inmobiliaria2025.model.Propietario;\r\nimport com.jorge.inmobiliaria2025.ui.login.LoginActivity;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    private AppBarConfiguration appBarConfiguration;\r\n    private ActivityMainBinding binding;\r\n    private MainViewModel mainVM;\r\n    private NavViewModel navVM;\r\n    private NavController navController;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        // üß© ViewBinding\r\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n        setSupportActionBar(binding.toolbar);\r\n\r\n        DrawerLayout drawer = binding.drawerLayout;\r\n        navController = NavHostFragment.findNavController(\r\n                java.util.Objects.requireNonNull(\r\n                        getSupportFragmentManager().findFragmentById(R.id.nav_host_fragment)\r\n                )\r\n        );\r\n\r\n        // ‚úÖ Drawer configurado (sin pagosFragment, que no es destino ra√≠z)\r\n        appBarConfiguration = new AppBarConfiguration.Builder(\r\n                R.id.nav_ubicacion,\r\n                R.id.nav_perfil,\r\n                R.id.nav_inmuebles,\r\n                R.id.nav_contratos,\r\n                R.id.nav_logout\r\n        ).setOpenableLayout(drawer).build();\r\n\r\n        NavigationUI.setupActionBarWithNavController(this, navController, appBarConfiguration);\r\n        NavigationUI.setupWithNavController(binding.navView, navController);\r\n\r\n        // üß† ViewModels\r\n        mainVM = new ViewModelProvider(this).get(MainViewModel.class);\r\n        navVM = new ViewModelProvider(this).get(NavViewModel.class);\r\n\r\n        // ‚úÖ Listener de navegaci√≥n del Drawer (con fix de stack limpio)\r\n        binding.navView.setNavigationItemSelectedListener(item -> {\r\n            int id = item.getItemId();\r\n            Log.d(\"NAV\", \"üß≠ Item seleccionado: \" + getResources().getResourceEntryName(id));\r\n\r\n            if (id == R.id.nav_contratos) {\r\n                Log.d(\"NAV\", \"üßπ Reiniciando stack y navegando a Contratos...\");\r\n\r\n                // üî• Limpia todo el back stack (detalle previo incluido)\r\n                navController.popBackStack(R.id.nav_graph, true);\r\n\r\n                // üî• Navega a Contratos solo si no est√° activo\r\n                NavDestination current = navController.getCurrentDestination();\r\n                if (current == null || current.getId() != R.id.nav_contratos) {\r\n                    NavOptions options = new NavOptions.Builder()\r\n                            .setLaunchSingleTop(true)\r\n                            .setPopUpTo(R.id.nav_graph, false)\r\n                            .build();\r\n                    navController.navigate(R.id.nav_contratos, null, options);\r\n                }\r\n\r\n                binding.drawerLayout.closeDrawer(binding.navView);\r\n                return true;\r\n            }\r\n\r\n            // üîπ Fallback est√°ndar para otros destinos del Drawer\r\n            boolean handled = NavigationUI.onNavDestinationSelected(item, navController)\r\n                    || super.onOptionsItemSelected(item);\r\n\r\n            if (handled) {\r\n                binding.drawerLayout.closeDrawer(binding.navView);\r\n            }\r\n\r\n            return handled;\r\n        });\r\n\r\n        // ‚úÖ Observadores de LiveData\r\n        observarEventos();\r\n\r\n        // ‚úÖ Manejo del bot√≥n ‚ÄúAtr√°s‚Äù universal\r\n        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {\r\n            @Override\r\n            public void handleOnBackPressed() {\r\n                DrawerLayout drawerLayout = binding.drawerLayout;\r\n\r\n                if (drawerLayout.isDrawerOpen(binding.navView)) {\r\n                    drawerLayout.closeDrawer(binding.navView);\r\n                    return;\r\n                }\r\n\r\n                // Si Navigation puede retroceder ‚Üí hacerlo\r\n                if (!navController.popBackStack()) {\r\n                    // Ya est√°s en ra√≠z ‚Üí cerrar app\r\n                    finish();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // ‚úÖ m√©todo observarEventos()\r\n    private void observarEventos() {\r\n        // üîπ Redirecci√≥n a login\r\n        mainVM.getNavegarLogin().observe(this, navegar -> {\r\n            if (navegar) {\r\n                startActivity(new Intent(this, LoginActivity.class));\r\n                finish();\r\n            }\r\n        });\r\n\r\n        // üîπ Actualizaci√≥n del header\r\n        mainVM.getPropietarioHeader().observe(this, this::actualizarHeaderUsuario);\r\n\r\n        // üîπ Observa tambi√©n el LiveData del avatar\r\n        mainVM.getAvatarUrl().observe(this, avatar -> {\r\n            View headerView = binding.navView.getHeaderView(0);\r\n            com.jorge.inmobiliaria2025.databinding.NavHeaderBinding headerBinding =\r\n                    com.jorge.inmobiliaria2025.databinding.NavHeaderBinding.bind(headerView);\r\n\r\n            Glide.with(this)\r\n                    .load(avatar)\r\n                    .placeholder(R.drawable.ic_person)\r\n                    .error(R.drawable.ic_person)\r\n                    .circleCrop()\r\n                    .into(headerBinding.imageViewProfile);\r\n        });\r\n\r\n        // üîπ Navegaci√≥n global desde ViewModel\r\n        navVM.getAccionNavegarDetalle().observe(this, args -> {\r\n            Log.i(\"MAIN\", \"‚û°Ô∏è Navegando al detalle desde NavViewModel\");\r\n            navController.navigate(R.id.action_inmueblesFragment_to_detalleInmuebleFragment, args);\r\n        });\r\n    }\r\n\r\n    // üîπ Actualiza el header del men√∫ lateral\r\n    private void actualizarHeaderUsuario(Propietario propietario) {\r\n        View headerView = binding.navView.getHeaderView(0);\r\n        com.jorge.inmobiliaria2025.databinding.NavHeaderBinding headerBinding =\r\n                com.jorge.inmobiliaria2025.databinding.NavHeaderBinding.bind(headerView);\r\n\r\n        headerBinding.headerTitle.setText(propietario.getNombre() + \" \" + propietario.getApellido());\r\n        headerBinding.headerSubtitle.setText(propietario.getEmail());\r\n    }\r\n\r\n    @Override\r\n    public boolean onSupportNavigateUp() {\r\n        return NavigationUI.navigateUp(navController, appBarConfiguration)\r\n                || super.onSupportNavigateUp();\r\n    }\r\n}\r\n",
                    "MainViewModel.java": "package com.jorge.inmobiliaria2025.ui.nav;\r\n\r\nimport android.app.Application;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.lifecycle.AndroidViewModel;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.jorge.inmobiliaria2025.InmobiliariaApp;\r\nimport com.jorge.inmobiliaria2025.R;\r\nimport com.jorge.inmobiliaria2025.localdata.SessionManager;\r\nimport com.jorge.inmobiliaria2025.model.Propietario;\r\n\r\n/**\r\n * üß† MainViewModel\r\n * ViewModel global de sesi√≥n y encabezado del Drawer.\r\n * Controla el estado de login, los datos del propietario\r\n * y actualiza el avatar sin l√≥gica en la Activity ni Fragments.\r\n */\r\npublic class MainViewModel extends AndroidViewModel {\r\n\r\n    private final MutableLiveData<Propietario> _propietarioHeader = new MutableLiveData<>();\r\n    private final MutableLiveData<Boolean> _navegarLogin = new MutableLiveData<>();\r\n\r\n    public MainViewModel(@NonNull Application app) {\r\n        super(app);\r\n        verificarSesion();\r\n    }\r\n\r\n    /** üîπ Comprueba si hay sesi√≥n activa y actualiza los LiveData */\r\n    private void verificarSesion() {\r\n        SessionManager sm = new SessionManager(getApplication());\r\n        Propietario p = sm.obtenerPropietarioActual();\r\n\r\n        if (p == null) {\r\n            p = new Propietario();\r\n            p.setEmail(InmobiliariaApp.getInstance().obtenerEmail());\r\n            _navegarLogin.postValue(true);\r\n        } else {\r\n            _navegarLogin.postValue(false);\r\n        }\r\n\r\n        _propietarioHeader.postValue(p);\r\n        actualizarAvatar(p);\r\n    }\r\n\r\n    /** üîπ M√©todo p√∫blico por si se necesita refrescar sesi√≥n luego del login */\r\n    public void refrescarSesion() {\r\n        verificarSesion();\r\n    }\r\n\r\n    /** üîπ Permite actualizar el header desde cualquier Fragment */\r\n    public void actualizarHeader(Propietario propietario) {\r\n        if (propietario != null) {\r\n            _propietarioHeader.postValue(propietario);\r\n        }\r\n    }\r\n\r\n    /** üîπ Publicaci√≥n inmutable para la vista */\r\n    public LiveData<Propietario> getPropietarioHeader() {\r\n        return _propietarioHeader;\r\n    }\r\n\r\n    public LiveData<Boolean> getNavegarLogin() {\r\n        return _navegarLogin;\r\n    }\r\n    public Object getAvatarUrl(Propietario propietario) {\r\n        String url = propietario.getAvatarUrl();\r\n        if (url == null || url.isEmpty()) {\r\n            return R.drawable.ic_person; // recurso local\r\n        }\r\n        return url; // URL remota\r\n    }\r\n\r\n    /** üîπ Carga del avatar (sin l√≥gica en la Activity) */\r\n    public void cargarAvatarEn(ImageView imageView, Propietario propietario) {\r\n        try {\r\n            SessionManager sm = new SessionManager(getApplication());\r\n            String url = sm.getAvatarFullUrl(propietario.getAvatarUrl());\r\n\r\n            Glide.with(getApplication())\r\n                    .load((url != null && !url.isEmpty()) ? url : R.drawable.ic_person)\r\n                    .placeholder(R.drawable.ic_person)\r\n                    .error(R.drawable.ic_person)\r\n                    .circleCrop()\r\n                    .into(imageView);\r\n        } catch (Exception e) {\r\n            imageView.setImageResource(R.drawable.ic_person);\r\n        }\r\n    }\r\n    // ‚úÖ Nuevo m√©todo reemplazando getAvatarUrl y cargarAvatarEn\r\n    private final MutableLiveData<Object> _avatarUrl = new MutableLiveData<>();\r\n    public LiveData<Object> getAvatarUrl() {\r\n        return _avatarUrl;\r\n    }\r\n\r\n    /** üîπ Actualiza el LiveData del avatar seg√∫n el propietario actual */\r\n    private void actualizarAvatar(Propietario propietario) {\r\n        Object recurso = (propietario == null || propietario.getAvatarUrl() == null || propietario.getAvatarUrl().isEmpty())\r\n                ? R.drawable.ic_person\r\n                : propietario.getAvatarUrl();\r\n        _avatarUrl.postValue(recurso);\r\n    }\r\n\r\n}\r\n",
                    "NavViewModel.java": "package com.jorge.inmobiliaria2025.ui.nav;\r\n\r\nimport android.app.Application;\r\nimport android.os.Bundle;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.lifecycle.AndroidViewModel;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\n/**\r\n * üß≠ NavViewModel\r\n * ViewModel global que centraliza las √≥rdenes de navegaci√≥n.\r\n * Permite que cualquier otro ViewModel emita un destino\r\n * sin agregar l√≥gica de navegaci√≥n en los fragments.\r\n */\r\npublic class NavViewModel extends AndroidViewModel {\r\n\r\n    // üîπ Evento de navegaci√≥n (detalle de inmueble, u otros)\r\n    private final MutableLiveData<Bundle> _accionNavegarDetalle = new MutableLiveData<>();\r\n\r\n    public NavViewModel(@NonNull Application app) {\r\n        super(app);\r\n    }\r\n\r\n    /** üëÅÔ∏è LiveData observado por MainActivity */\r\n    public LiveData<Bundle> getAccionNavegarDetalle() {\r\n        return _accionNavegarDetalle;\r\n    }\r\n\r\n    /** üöÄ Emite un evento de navegaci√≥n hacia el detalle de inmueble */\r\n    public void navegarADetalle(Bundle args) {\r\n        _accionNavegarDetalle.postValue(args);\r\n    }\r\n\r\n    /** üßπ Limpia el evento luego de usarlo (para evitar repetici√≥n en rotaciones) */\r\n    public void limpiarAccion() {\r\n        _accionNavegarDetalle.setValue(null);\r\n    }\r\n}\r\n"
                  },
                  "pagos": {
                    "PagosAdapter.java": "package com.jorge.inmobiliaria2025.ui.pagos;\r\n\r\nimport android.content.Context;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.jorge.inmobiliaria2025.R;\r\nimport com.jorge.inmobiliaria2025.model.Pago;\r\n\r\nimport java.text.NumberFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class PagosAdapter extends RecyclerView.Adapter<PagosAdapter.ViewHolder> {\r\n\r\n    private final Context context;\r\n    private final List<Pago> pagos;\r\n    private final NumberFormat formatoMoneda = NumberFormat.getCurrencyInstance(new Locale(\"es\", \"AR\"));\r\n    private final SimpleDateFormat formatoFecha = new SimpleDateFormat(\"dd/MM/yyyy\", Locale.getDefault());\r\n\r\n    public PagosAdapter(Context context, List<Pago> pagos) {\r\n        this.context = context;\r\n        this.pagos = pagos;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        View v = LayoutInflater.from(context).inflate(R.layout.item_pago, parent, false);\r\n        return new ViewHolder(v);\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {\r\n        Pago p = pagos.get(position);\r\n\r\n        // üîπ N√∫mero de pago\r\n        holder.tvNumero.setText(String.format(Locale.getDefault(), \"Pago N¬∞ %d\", p.getNumeroPago()));\r\n        String fechaOriginal = p.getFechaPago(); // si tu modelo usa String\r\n        String fechaFormateada = \"Sin fecha\";\r\n\r\n        try {\r\n            if (fechaOriginal != null && !fechaOriginal.isEmpty()) {\r\n                // Parsear ISO-8601 (ej: 2025-10-22T00:00:00)\r\n                String soloFecha = fechaOriginal.split(\"T\")[0];\r\n                String[] partes = soloFecha.split(\"-\");\r\n                // Formato a dd/MM/yyyy\r\n                fechaFormateada = partes[2] + \"/\" + partes[1] + \"/\" + partes[0];\r\n            }\r\n        } catch (Exception e) {\r\n            fechaFormateada = \"Fecha inv√°lida\";\r\n        }\r\n\r\n        holder.tvFecha.setText(\"Fecha: \" + fechaFormateada);\r\n\r\n\r\n        // üîπ Importe con formato local\r\n        holder.tvImporte.setText(\"Importe: \" + formatoMoneda.format(p.getImporte()));\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return pagos != null ? pagos.size() : 0;\r\n    }\r\n\r\n    public static class ViewHolder extends RecyclerView.ViewHolder {\r\n        TextView tvNumero, tvFecha, tvImporte;\r\n\r\n        public ViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            tvNumero = itemView.findViewById(R.id.tvNumeroPago);\r\n            tvFecha = itemView.findViewById(R.id.tvFechaPago);\r\n            tvImporte = itemView.findViewById(R.id.tvImportePago);\r\n        }\r\n    }\r\n}\r\n",
                    "PagosFragment.java": "package com.jorge.inmobiliaria2025.ui.pagos;\r\n\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.lifecycle.ViewModelProvider;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.jorge.inmobiliaria2025.R;\r\n\r\n/**\r\n * üí∞ PagosFragment\r\n * Muestra la lista de pagos asociados a un contrato.\r\n * Totalmente gestionado por PagosViewModel (MVVM limpio).\r\n */\r\npublic class PagosFragment extends Fragment {\r\n\r\n    private PagosViewModel vm;\r\n    private RecyclerView recyclerView;\r\n    private TextView tvMensaje;\r\n    private int contratoId = -1;\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             @Nullable ViewGroup container,\r\n                             @Nullable Bundle savedInstanceState) {\r\n\r\n        View v = inflater.inflate(R.layout.fragment_pagos, container, false);\r\n\r\n        recyclerView = v.findViewById(R.id.recyclerPagos);\r\n        tvMensaje = v.findViewById(R.id.tvMensajePagos);\r\n        recyclerView.setLayoutManager(new LinearLayoutManager(requireContext()));\r\n\r\n        Log.d(\"PAGOS\", \"üß© PagosFragment creado\");\r\n\r\n        return v;\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view,\r\n                              @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        vm = new ViewModelProvider(this).get(PagosViewModel.class);\r\n\r\n        // ‚úÖ Lee los argumentos enviados desde DetalleContratoFragment\r\n        if (getArguments() != null) {\r\n            contratoId = getArguments().getInt(\"contratoId\", -1);\r\n            Log.d(\"PAGOS\", \"üì¶ contratoId recibido: \" + contratoId);\r\n        } else {\r\n            Log.w(\"PAGOS\", \"‚ö†Ô∏è No se recibieron argumentos en PagosFragment\");\r\n        }\r\n\r\n        // üß† Observa el estado de la UI\r\n        vm.getUiState().observe(getViewLifecycleOwner(), state -> {\r\n            tvMensaje.setText(state.getMensaje());\r\n\r\n            @SuppressWarnings(\"WrongConstant\")\r\n            int visMsg = state.getVisibilidadMensaje();\r\n            tvMensaje.setVisibility(View.VISIBLE);\r\n\r\n            @SuppressWarnings(\"WrongConstant\")\r\n            int visLista = state.getVisibilidadLista();\r\n            recyclerView.setVisibility(View.VISIBLE);\r\n\r\n            recyclerView.setAdapter(state.getAdapter());\r\n        });\r\n\r\n        // üü¢ Inicializa el ViewModel con los argumentos recibidos\r\n        Bundle args = new Bundle();\r\n        args.putInt(\"contratoId\", contratoId);\r\n        vm.inicializar(requireContext(), args);\r\n\r\n    }\r\n}\r\n",
                    "PagosViewModel.java": "package com.jorge.inmobiliaria2025.ui.pagos;\r\n\r\nimport android.app.Application;\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.lifecycle.AndroidViewModel;\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.lifecycle.MutableLiveData;\r\n\r\nimport com.jorge.inmobiliaria2025.localdata.SessionManager;\r\nimport com.jorge.inmobiliaria2025.Retrofit.ApiService;\r\nimport com.jorge.inmobiliaria2025.Retrofit.RetrofitClient;\r\nimport com.jorge.inmobiliaria2025.model.Pago;\r\n\r\nimport java.util.List;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Callback;\r\nimport retrofit2.Response;\r\n\r\npublic class PagosViewModel extends AndroidViewModel {\r\n\r\n    public static class UiState {\r\n        private final String mensaje;\r\n        private final int visibilidadMensaje;\r\n        private final int visibilidadLista;\r\n        private final PagosAdapter adapter;\r\n\r\n        public UiState(String mensaje, int visibilidadMensaje, int visibilidadLista, PagosAdapter adapter) {\r\n            this.mensaje = mensaje;\r\n            this.visibilidadMensaje = visibilidadMensaje;\r\n            this.visibilidadLista = visibilidadLista;\r\n            this.adapter = adapter;\r\n        }\r\n\r\n        public String getMensaje() { return mensaje; }\r\n\r\n        @SuppressWarnings(\"WrongConstant\")\r\n        public int getVisibilidadMensaje() { return visibilidadMensaje; }\r\n\r\n        @SuppressWarnings(\"WrongConstant\")\r\n        public int getVisibilidadLista() { return visibilidadLista; }\r\n\r\n        public PagosAdapter getAdapter() { return adapter; }\r\n    }\r\n\r\n\r\n    private final MutableLiveData<UiState> uiState = new MutableLiveData<>();\r\n\r\n    public PagosViewModel(@NonNull Application app) {\r\n        super(app);\r\n    }\r\n\r\n    public LiveData<UiState> getUiState() {\r\n        return uiState;\r\n    }\r\n\r\n    // ===============================\r\n    // üîπ Punto de entrada desde Fragment\r\n    // ===============================\r\n    public void inicializar(Context ctx, Bundle args) {\r\n        if (args == null || !args.containsKey(\"contratoSeleccionado\")) {\r\n            mostrarMensaje(\"No se recibi√≥ ning√∫n contrato.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            com.jorge.inmobiliaria2025.model.Contrato contrato =\r\n                    (com.jorge.inmobiliaria2025.model.Contrato) args.getSerializable(\"contratoSeleccionado\");\r\n\r\n            if (contrato == null) {\r\n                mostrarMensaje(\"No se recibi√≥ ning√∫n contrato.\");\r\n                return;\r\n            }\r\n\r\n            Log.d(\"PagosVM\", \"‚úÖ Contrato recibido con ID=\" + contrato.getId());\r\n            cargarPagos(ctx, contrato.getId());\r\n\r\n        } catch (Exception e) {\r\n            Log.e(\"PagosVM\", \"‚ùå Error al obtener contrato desde argumentos: \" + e.getMessage());\r\n            mostrarMensaje(\"No se pudo leer el contrato.\");\r\n        }\r\n    }\r\n\r\n    private void cargarPagos(Context context, int idContrato) {\r\n        SessionManager session = new SessionManager(context);\r\n        String token = session.obtenerToken();\r\n\r\n        if (token == null || token.isEmpty()) {\r\n            Log.w(\"PagosVM\", \"‚ö†Ô∏è Token no disponible. No se puede cargar pagos.\");\r\n            mostrarMensaje(\"‚ö†Ô∏è Sesi√≥n expirada. Inicie sesi√≥n nuevamente.\");\r\n            return;\r\n        }\r\n\r\n        Log.d(\"PagosVM\", \"üîπ Solicitando pagos para contrato ID=\" + idContrato);\r\n        ApiService api = RetrofitClient.getInstance(context).create(ApiService.class);\r\n\r\n        api.getPagosPorContrato(\"Bearer \" + token, idContrato).enqueue(new Callback<List<Pago>>() {\r\n            @Override\r\n            public void onResponse(@NonNull Call<List<Pago>> call, @NonNull Response<List<Pago>> response) {\r\n                Log.d(\"PagosVM\", \"üì° Respuesta HTTP: \" + response.code());\r\n\r\n                if (response.isSuccessful() && response.body() != null) {\r\n                    List<Pago> pagos = response.body();\r\n                    Log.d(\"PagosVM\", \"‚úÖ Pagos recibidos: \" + pagos.size());\r\n\r\n                    if (!pagos.isEmpty()) {\r\n                        PagosAdapter adapter = new PagosAdapter(context, pagos);\r\n                        uiState.postValue(\r\n                                new UiState(\r\n                                        \"\",              // sin mensaje\r\n                                        View.GONE,       // mensaje oculto\r\n                                        View.VISIBLE,    // lista visible\r\n                                        adapter\r\n                                )\r\n                        );\r\n                    } else {\r\n                        Log.w(\"PagosVM\", \"‚ö†Ô∏è El contrato no tiene pagos.\");\r\n                        mostrarMensaje(\"No se encontraron pagos registrados.\");\r\n                    }\r\n                } else {\r\n                    Log.e(\"PagosVM\", \"‚ùå Error en respuesta: \" + response.code());\r\n                    mostrarMensaje(\"Error al obtener pagos del servidor (\" + response.code() + \").\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(@NonNull Call<List<Pago>> call, @NonNull Throwable t) {\r\n                Log.e(\"PagosVM\", \"üí• Error de red al cargar pagos: \" + t.getMessage());\r\n                mostrarMensaje(\"Error de conexi√≥n al obtener pagos.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    // ===============================\r\n    // üîπ M√©todo utilitario interno\r\n    // ===============================\r\n    private void mostrarMensaje(String msg) {\r\n        uiState.postValue(\r\n                new UiState(\r\n                        msg,\r\n                        View.VISIBLE,   // mostrar mensaje\r\n                        View.GONE,      // ocultar lista\r\n                        null\r\n                )\r\n        );\r\n    }\r\n}\r\n"
                  }
                }
              }
            }
          }
        },
        "res": {
          "menu": {
            "drawer_menu.xml": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n\r\n    <group android:checkableBehavior=\"single\">\r\n\r\n        <!-- üë§ Perfil -->\r\n        <item\r\n            android:id=\"@+id/nav_perfil\"\r\n            android:title=\"Perfil\"\r\n            android:icon=\"@drawable/ic_person\" />\r\n\r\n        <!-- üè† Inmuebles -->\r\n        <item\r\n            android:id=\"@+id/nav_inmuebles\"\r\n            android:title=\"Inmuebles\"\r\n            android:icon=\"@drawable/ic_baseline_home_24\" />\r\n\r\n        <!-- üìÑ Contratos -->\r\n        <item\r\n            android:id=\"@+id/nav_contratos\"\r\n            android:title=\"Contratos\"\r\n            android:icon=\"@drawable/ic_baseline_description_24\" />\r\n\r\n\r\n        <!-- üö™ Cerrar sesi√≥n -->\r\n        <item\r\n            android:id=\"@+id/nav_logout\"\r\n            android:title=\"Cerrar sesi√≥n\"\r\n            android:icon=\"@drawable/ic_baseline_logout_24\" />\r\n    </group>\r\n</menu>\r\n"
          },
          "navigation": {
            "nav_graph.xml": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/nav_graph\"\r\n    app:startDestination=\"@id/nav_ubicacion\">\r\n\r\n    <!-- üó∫Ô∏è Pantalla inicial: mapa de ubicaci√≥n -->\r\n    <fragment\r\n        android:id=\"@+id/nav_ubicacion\"\r\n        android:name=\"com.jorge.inmobiliaria2025.ui.Inicio.UbicacionFragment\"\r\n        android:label=\"Ubicaci√≥n\"\r\n        tools:layout=\"@layout/fragment_ubicacion\" />\r\n\r\n    <!-- üë§ Perfil -->\r\n    <fragment\r\n        android:id=\"@+id/nav_perfil\"\r\n        android:name=\"com.jorge.inmobiliaria2025.ui.perfil.PerfilFragment\"\r\n        android:label=\"Perfil\"\r\n        tools:layout=\"@layout/fragment_perfil\" />\r\n\r\n    <!-- üè† Inmuebles -->\r\n    <fragment\r\n        android:id=\"@+id/nav_inmuebles\"\r\n        android:name=\"com.jorge.inmobiliaria2025.ui.Inmueble.InmueblesFragment\"\r\n        android:label=\"Inmuebles\"\r\n        tools:layout=\"@layout/fragment_inmuebles\">\r\n\r\n        <action\r\n            android:id=\"@+id/action_inmueblesFragment_to_detalleInmuebleFragment\"\r\n            app:destination=\"@id/detalleInmuebleFragment\" />\r\n\r\n        <action\r\n            android:id=\"@+id/action_inmueblesFragment_to_nuevoInmuebleFragment\"\r\n            app:destination=\"@id/nuevoInmuebleFragment\" />\r\n    </fragment>\r\n\r\n    <!-- üè† Detalle de inmueble -->\r\n    <fragment\r\n        android:id=\"@+id/detalleInmuebleFragment\"\r\n        android:name=\"com.jorge.inmobiliaria2025.ui.Inmueble.DetalleInmuebleFragment\"\r\n        android:label=\"Detalle del Inmueble\"\r\n        tools:layout=\"@layout/fragment_detalle_inmueble\" />\r\n\r\n    <!-- üè° Nuevo inmueble -->\r\n    <fragment\r\n        android:id=\"@+id/nuevoInmuebleFragment\"\r\n        android:name=\"com.jorge.inmobiliaria2025.ui.Inmueble.NuevoInmuebleFragment\"\r\n        android:label=\"Nuevo Inmueble\"\r\n        tools:layout=\"@layout/fragment_nuevo_inmueble\" />\r\n\r\n\r\n    <!-- üìÑ Contratos -->\r\n    <fragment\r\n        android:id=\"@+id/nav_contratos\"\r\n        android:name=\"com.jorge.inmobiliaria2025.ui.contratos.ContratosFragment\"\r\n        android:label=\"Contratos\"\r\n        tools:layout=\"@layout/fragment_contratos\">\r\n\r\n        <!-- ‚úÖ IMPORTANTE: asegura que solo exista un Detalle en el back stack -->\r\n        <action\r\n            android:id=\"@+id/action_contratosFragment_to_detalleContratoFragment\"\r\n            app:destination=\"@id/detalleContratoFragment\"\r\n            app:popUpTo=\"@id/detalleContratoFragment\"\r\n            app:popUpToInclusive=\"true\" />\r\n    </fragment>\r\n\r\n    <!-- üåç Acci√≥n global para limpiar el stack al ir a Contratos -->\r\n    <action\r\n        android:id=\"@+id/action_global_nav_contratos\"\r\n        app:destination=\"@id/nav_contratos\"\r\n        app:launchSingleTop=\"true\"\r\n        app:popUpTo=\"@id/nav_graph\"\r\n        app:popUpToInclusive=\"true\" />\r\n\r\n\r\n    <!-- üìú Detalle de contrato -->\r\n    <fragment\r\n        android:id=\"@+id/detalleContratoFragment\"\r\n        android:name=\"com.jorge.inmobiliaria2025.ui.contratos.DetalleContratoFragment\"\r\n        android:label=\"Detalle del Contrato\"\r\n        tools:layout=\"@layout/fragment_detalle_contrato\">\r\n\r\n        <!-- ‚úÖ Mantiene Detalle en pila, permite volver desde Pagos una sola vez -->\r\n        <action\r\n            android:id=\"@+id/action_detalleContratoFragment_to_pagosFragment\"\r\n            app:destination=\"@id/pagosFragment\"\r\n            app:launchSingleTop=\"true\"\r\n            app:popUpToInclusive=\"false\" />\r\n    </fragment>\r\n\r\n    <!-- üí∞ Pagos -->\r\n    <fragment\r\n        android:id=\"@+id/pagosFragment\"\r\n        android:name=\"com.jorge.inmobiliaria2025.ui.pagos.PagosFragment\"\r\n        android:label=\"Pagos\"\r\n        tools:layout=\"@layout/fragment_pagos\" />\r\n\r\n    <!-- üö™ Cerrar sesi√≥n -->\r\n    <fragment\r\n        android:id=\"@+id/nav_logout\"\r\n        android:name=\"com.jorge.inmobiliaria2025.ui.logout.LogoutFragment\"\r\n        android:label=\"Cerrar sesi√≥n\"\r\n        tools:layout=\"@layout/fragment_logout\" />\r\n\r\n</navigation>\r\n"
          }
        }
      }
    }
  }
}